{"version":3,"sources":["scripts/main.js"],"names":["countOfColumns","tableElem","rows","childElementCount","copyTableColumn","columnPos","map","row","cells","cloneNode","pasteTableColumn","columnElem","insertPos","length","columnsCount","insertIdx","i","currentRow","currentCell","after","before","table","document","querySelector","column"],"mappings":";AAAA,aA+DA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA5DA,SAASA,EAAeC,GACfA,OAAAA,EAAUC,KAAK,GAAGC,kBAI3B,SAASC,EAAgBH,EAAWI,GAG9BA,OAAAA,GAAaL,EAAeC,IAAcI,EAAY,EACjD,GAKgB,EAAIJ,EAAUC,MAAMI,IAAI,SAAAC,GACxCA,OAAAA,EAAIC,MAAMH,GAAWI,WAAU,KAO1C,SAASC,EAAiBT,EAAWU,EAAYC,GAG3CD,GAAsB,IAAtBA,EAAWE,OAeV,IAXCC,IAAAA,EAAed,EAAeC,GAO9Bc,EAAYH,GAAa,EAC3B,EAAIA,GAAaE,EACfA,EAAe,EAAIF,EAEhBI,EAAI,EAAGA,EAAIL,EAAWE,OAAQG,IAAK,CACpCC,IACAC,EADajB,EAAUC,KAAKc,GACHR,MAAMO,GAKjCH,GAAaE,EACfI,EAAYC,MAAMR,EAAWK,IAI/BE,EAAYE,OAAOT,EAAWK,KAIlC,IAAMK,EAAQC,SAASC,cAAc,SAC/BC,EAASpB,EAAgBiB,EAAO,GAGtCX,EAAiBW,EAAOG,EAAQxB,EAAeqB,GAAS","file":"main.2561b6f1.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// function for counting columns in a table\nfunction countOfColumns(tableElem) {\n  return tableElem.rows[0].childElementCount;\n}\n\n// function of copying the desired column from the table\nfunction copyTableColumn(tableElem, columnPos) {\n  // if you pass an index that exceeds the number of columns,\n  // it returns an empty array\n  if (columnPos >= countOfColumns(tableElem) || columnPos < 0) {\n    return [];\n  }\n\n  // we copy the elements of the desired column, so that these\n  // elements do not refer to the elements of the copied column\n  const targetColumnCopy = [...tableElem.rows].map(row => {\n    return row.cells[columnPos].cloneNode(true);\n  });\n\n  return targetColumnCopy;\n}\n\n// function to insert a certain column into a table by the column index\nfunction pasteTableColumn(tableElem, columnElem, insertPos) {\n  // if the copy of the column did not happen and an empty array came,\n  // then do not insert anything into the table\n  if (columnElem.length === 0) {\n    return;\n  }\n\n  const columnsCount = countOfColumns(tableElem);\n\n  // we check for the correct index for inserting a column\n  // (if the index is less than 0, we still insert the column\n  // at the beginning of the table, if the index is greater\n  // than the number of columns in the table, we still insert\n  // it at the end of the table)\n  const insertIdx = insertPos <= 0\n    ? 0 : insertPos >= columnsCount\n      ? columnsCount - 1 : insertPos;\n\n  for (let i = 0; i < columnElem.length; i++) {\n    const currentRow = tableElem.rows[i];\n    const currentCell = currentRow.cells[insertIdx];\n\n    // if you want to insert it at the end of the table,\n    // use the after method for the last column of the table,\n    // otherwise insert the column before the other one\n    if (insertPos >= columnsCount) {\n      currentCell.after(columnElem[i]);\n      continue;\n    }\n\n    currentCell.before(columnElem[i]);\n  }\n}\n\nconst table = document.querySelector('table');\nconst column = copyTableColumn(table, 1);\n\n// we paste the copied column before the last column in the table\npasteTableColumn(table, column, countOfColumns(table) - 1);\n"]}